_id: spc_997619c0818844089085f7a67b1d5ad0
type: ApiSpec
parentId: wrk_3a5db650ae914963a001403a3695bac8
modified: 1659540150374
created: 1659466562598
fileName: MyApi
contents: |-
  openapi: 3.0.1
  info:
    title: My API
    version: '1.0'
    description: some great api
    termsOfService: https://www.example.com/
    contact:
      email: team@example.com
      name: My Team
      url: https://www.example.com/contact
    license:
      name: My License
      url: https://www.example.com/license
  servers:
    - url: http://localhost:{port}/
      variables:
        port:
          default: '3000'
          enum:
            - '3000'
            - '3001'
          description: port 3000 (dev) and 8001 (prod)
        version:
          default: v3
          enum:
            - v3
            - v2
            - v1
          description: all versions
      description: local server
    - url: https://my-json-server.typicode.com/bearc0025/api
      variables: {}
      description: demo server at github
    - url: https://www.example.com:{port}/{version}
      variables:
        port:
          default: '8000'
          enum:
            - '8000'
            - '8001'
          description: port 8000 (dev) and 8001 (prod)
        version:
          default: v3
          enum:
            - v3
            - v2
            - v1
          description: all versions
      description: example server
  paths:
    /users:
      summary: user level operations
      description: fetch all users, create new user
      get:
        summary: Accounts table
        description: return all users from server
        operationId: fetchUsers
        responses:
          '200':
            $ref: '#/components/responses/UserArrayResponseBody'
          default:
            $ref: '#/components/responses/DefaultResponse'
        tags:
          - users
      post:
        summary: Create a new User
        description: Store a User on the server
        operationId: createUser
        requestBody:
          $ref: '#/components/requestBodies/UserPostBody'
        responses:
          '201':
            $ref: '#/components/responses/UserRespBody'
          default:
            $ref: '#/components/responses/DefaultResponse'
        tags:
          - users
    /users/{userId}:
      summary: user specific operations
      description: fetch, update, delete a user
      parameters:
        - $ref: '#/components/parameters/UserId'
      get:
        summary: fetch a user
        description: returns a user from the server
        operationId: fetchUser
        responses:
          '200':
            $ref: '#/components/responses/UserRespBody'
          default:
            $ref: '#/components/responses/DefaultResponse'
        tags:
          - users
      delete:
        summary: delete a user
        description: remove user from server
        operationId: deleteUser
        responses:
          default:
            description: Default error sample response
        tags:
          - users
      patch:
        summary: update a user
        description: updates user on server
        operationId: updateUser
        requestBody:
          $ref: '#/components/requestBodies/UserPostBody'
        responses:
          '200':
            $ref: '#/components/responses/UserRespBody'
          default:
            $ref: '#/components/responses/DefaultResponse'
        tags:
          - users
  components:
    parameters:
      UserId:
        name: userId
        in: path
        required: true
        description: user id
        schema:
          type: string
          example: qwerty
    responses:
      DefaultResponse:
        description: default message from server
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  example: 123
                message:
                  type: string
                  example: error...
      UserArrayResponseBody:
        description: response of users array
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserArray'
      UserRespBody:
        description: successful response
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullUser'
    requestBodies:
      UserPostBody:
        description: body of user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNewUser'
    schemas:
      UserArray:
        type: array
        items:
          $ref: '#/components/schemas/FullUser'
      PostNewUser:
        type: object
        properties:
          username:
            type: string
            example: bear
          score:
            type: integer
            example: 55
          active:
            type: boolean
            example: true
      FullUser:
        allOf:
          - $ref: '#/components/schemas/PostNewUser'
          - type: object
            properties:
              id:
                type: string
                example: qwerty
contentType: yaml
